#!/usr/bin/env python
import ConfigParser
import shlex
import sys
import getpass
import time

import os
import re


RETURN_CODE_WRONG_USAGE = 3
RETURN_CODE_COMMAND_NOT_FOUND = 3
RETURN_CODE_INTERNAL_ERROR = 3

CONFIG_SECTION_NAME_COMMANDS = "commands"

LOG_DIRECTORY = "/tmp/audit"

buffer_exception_uncritical = []


def match_command(pattern, command):
    # noinspection PyBroadException
    try:
        return re.match("^" + pattern + "$", command)
    except:
        # noinspection PyBroadException
        try:
            if shlex.split(command)[0] == shlex.split(pattern)[0]:
                print >> sys.stderr, \
                    "ssh-restrict: failed to evaluate regex '%s' for command '%s': %s" % \
                    (pattern, command, sys.exc_info()[1])
                sys.exit(RETURN_CODE_INTERNAL_ERROR)
        except:
            buffer_exception_uncritical.append(
                "ssh-restrict: config analyzer failed for command definition '%s': %s" %
                (pattern, sys.exc_info()[1])
            )


def get_formatted_command_parts(command_template, command_match):
    # noinspection PyBroadException
    try:
        return shlex.split(command_template.format(*command_match.groups()))
    except:
        print >> sys.stderr, "ssh-restrict: formatting command '%s' failed: %s" % \
                             (command_template, sys.exc_info()[1])
        sys.exit(RETURN_CODE_INTERNAL_ERROR)

def touch(fname, times=None):
    fhandle = open(fname, 'a')
    try:
        os.utime(fname, times)
    finally:
        fhandle.close()

if len(sys.argv) != 2:
    print >> sys.stderr, "Usage: ssh-restrict CONFIG"
    sys.exit(RETURN_CODE_WRONG_USAGE)

try:
    original_command = os.environ["SSH_ORIGINAL_COMMAND"]
except KeyError:
    print >> sys.stderr, "ssh-restrict: $SSH_ORIGINAL_COMMAND is not set"
    sys.exit(RETURN_CODE_WRONG_USAGE)

is_tty = 'SSH_TTY' in os.environ
if not is_tty:
    print "Please connect using a TTY, use ssh -t to force TTY allocation"
    sys.exit(RETURN_CODE_WRONG_USAGE)

current_user = getpass.getuser()
current_time = time.strftime("%Y-%m-%d_%H-%M-%S")
log_file = LOG_DIRECTORY + os.sep + current_user + '_' + current_time + '.log'
touch(log_file)

config = ConfigParser.RawConfigParser()
config.readfp(open(sys.argv[1]))

for config_pattern, config_command in config.items(CONFIG_SECTION_NAME_COMMANDS):
    match_results = match_command(config_pattern, original_command)
    if match_results:
        command_parts = get_formatted_command_parts(config_command, match_results)
        try:
            command_str = ' '.join(command_parts)
            script_parts = ["script", "-a", "-c", command_str, "-f", "-q", log_file]
            os.execvp(script_parts[0], script_parts)
        except OSError:
            print >> sys.stderr, "ssh-restrict: command not found: %s" % \
                                 command_parts[0]
            sys.exit(RETURN_CODE_COMMAND_NOT_FOUND)
else:
    print >> sys.stderr, "ssh-restrict: command not defined: %s" % original_command
    if len(buffer_exception_uncritical) > 0:
        print >> sys.stderr, "\n".join(buffer_exception_uncritical)
        sys.exit(RETURN_CODE_INTERNAL_ERROR)
    sys.exit(RETURN_CODE_WRONG_USAGE)
